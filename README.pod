=pod

=encoding UTF-8

=head1 NAME

Test::Deep::NumberTolerant - A Test::Deep plugin for testing numbers within a tolerance range

=head1 VERSION

version 0.001

=head1 SYNOPSIS

    use Test::More;
    use Test::Deep;
    use Test::Deep::NumberTolerant;

    cmp_deeply(
        {
            counter => 123,
        },
        {
            counter => within_tolerance(100, plus_or_minus => 50),
        },
        'counter field is 100 plus or minus 50',
    );

=head1 DESCRIPTION

C<Test::Deep::NumberTolerant> provides the sub C<within_tolerance> to indicate
that the data being tested matches the equivalent C<tolerance(...)> value.

I wrote this because I found myself doing this a lot:

    cmp_deeply(
        $thing,
        methods(
            delete_time => methods(epoch => code( sub { $_[0] == tolerance(time(), plus_or_minus => 2) || (0, "got $_[0], expected ", time()) } )),
        ),
        'object has been deleted',
    );

With this module, this can be simplified to the much more readable:

    cmp_deeply(
        $thing,
        methods(
            delete_time => methods(epoch => within_tolerance(time(), plus_or_minus => 2)),
        ),
        'object has been deleted',
    );

=head1 FUNCTIONS

=head2 C<within_tolerance>

Exported by default; to be used within a L<Test::Deep> comparison function
such as L<cmp_deeply|Test::Deep/COMPARISON FUNCTIONS>.  Accepted arguments are
the same as for C<L<Number::Tolerant/tolerance>>.

=for Pod::Coverage descend
diag_message
init
renderExp
renderGot

=head1 SUPPORT

=for stopwords irc

Bugs may be submitted through L<the RT bug tracker|https://rt.cpan.org/Public/Dist/Display.html?Name=Test-Deep-NumberTolerant>
(or L<bug-Test-Deep-NumberTolerant@rt.cpan.org|mailto:bug-Test-Deep-NumberTolerant@rt.cpan.org>).
I am also usually active on irc, as 'ether' at C<irc.perl.org>.

=head1 SEE ALSO

=over 4

=item *

L<Test::Deep>

=item *

L<Number::Tolerant>

=back

=head1 AUTHOR

Karen Etheridge <ether@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by Karen Etheridge.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
